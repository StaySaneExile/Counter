{"version":3,"sources":["Settings/Set.js","Calc/Input.js","Settings/Settings.js","Calc/ButtonInc.js","Calc/Span.js","Calc/ButtonReset.js","Calc/Counter.js","App.js","serviceWorker.js","index.js"],"names":["Set","render","disable","_this","props","startValue","maxValue","react_default","a","createElement","disabled","onClick","setValue","className","React","Component","Input","onChange","type","value","Settings","changeMaxValue","e","setNewMaxValue","currentTarget","changeStartValue","setNewStartValue","startFilter","maxFilter","Calc_Input","src_Settings_Set","ButtonInc","count","addCount","Span","filterActive","ref","span","ButtonReset","unAddCount","Counter","Calc_Span","Calc_ButtonInc","Calc_ButtonReset","App","state","saveState","JSON","stringify","localStorage","setItem","setState","newMaxValue","Number","newStartValue","Calc_Counter","src_Settings_Settings","counterStateAsString","getItem","newState","parse","this","Boolean","window","location","hostname","match","ReactDOM","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.847f043e.chunk.js","sourcesContent":["import React from 'react';\nimport './Set.css';\n\n\nclass Set extends React.Component {\n\n    render = () => {\n        let disable = this.props.startValue < 0 || this.props.startValue >= this.props.maxValue\n        return (\n            <div >\n                <button disabled={disable}\n                        onClick={this.props.setValue}\n                        className='setButton'>set</button>\n            </div>\n\n        );\n    }\n}\n\nexport default Set;\n\n","import React from 'react';\nimport './Calc.css';\n\nclass Input extends React.Component {\n\n    render = () => {\n        return (\n                <input onChange={this.props.onChange}\n                       className={this.props.className}\n                       type={this.props.type}\n                       value={this.props.value}/>\n        );\n    }\n}\n\nexport default Input;\n\n","import React from 'react';\nimport './Set.css';\nimport Set from \"./../Settings/Set\";\nimport Input from \"../Calc/Input\";\n\nclass Settings extends React.Component {\n\n    changeMaxValue = (e) => {\n        this.props.setNewMaxValue(e.currentTarget.value)\n    }\n    changeStartValue = (e) => {\n        this.props.setNewStartValue(e.currentTarget.value)\n    }\n\n    render = () => {\n        let startFilter = this.props.startValue < 0 ||\n        this.props.maxValue <= this.props.startValue ? 'inputStartErr' : 'inputStart';\n\n        let maxFilter = this.props.maxValue <= this.props.startValue ||\n        this.props.maxValue <= 0 ? 'inputMaxErr' : 'inputMax';\n\n\n        return (\n            <div className='main'>\n                <div className='max'>Max value</div>\n                <div className='start'>Start value</div>\n                <Input onChange={this.changeMaxValue}\n                       className={maxFilter}\n                       value={this.props.maxValue}\n                       type={'number'}/>\n                <Input onChange={this.changeStartValue}\n                       className={startFilter}\n                       value={this.props.startValue}\n                       type={'number'}/>\n                <Set setValue={this.props.setValue}\n                     startValue={this.props.startValue}\n                     maxValue={this.props.maxValue}/>\n\n            </div>\n\n        );\n    }\n}\n\nexport default Settings;\n\n","import React from 'react';\nimport './Calc.css';\n\nclass ButtonInc extends React.Component {\n\n    render = () => {\n        let disable = this.props.count === this.props.maxValue;\n\n        return (\n                <button disabled={disable} onClick={this.props.addCount}\n                        className=\"buttonInc\">Inc\n                </button>\n        );\n    }\n}\n\nexport default ButtonInc;\n\n","import React from 'react';\nimport './Calc.css';\n\nclass Span extends React.Component {\n\n    render = () => {\n        let filterActive = this.props.count === this.props.maxValue ? \"filterActive\" :\"spanDef\";\n        return (\n\n                <span className={filterActive} ref={this.props.span}>\n                    {this.props.count}\n                </span>\n\n\n        );\n    }\n}\n\nexport default Span;\n\n","import React from 'react';\nimport './Calc.css';\n\nclass ButtonReset extends React.Component {\n    render = () => {\n        let disable = this.props.count === this.props.startValue\n        return (\n                < button disabled={disable}\n                         onClick={this.props.unAddCount}\n                         className=\"buttonReset\">\n                    Reset\n                </button>\n        );\n    }\n}\n\nexport default ButtonReset;\n\n","import React from 'react';\nimport './Calc.css';\nimport ButtonInc from \"./ButtonInc\";\nimport Span from \"./Span\";\nimport ButtonReset from \"./ButtonReset\";\n\nclass Counter extends React.Component {\n\n    render = () => {\n        return (\n            <div >\n                <div className='span'>\n                    <Span maxValue={this.props.maxValue}\n                          startValue={this.props.startValue}\n                          count={this.props.count}/>\n                </div>\n                <div className='buttons'>\n                    <ButtonInc count={this.props.count}\n                               addCount={this.props.addCount}\n                               maxValue={this.props.maxValue}/>\n\n                    <ButtonReset count={this.props.count}\n                                 unAddCount={this.props.unAddCount}\n                                 startValue={this.props.startValue}/>\n                </div>\n            </div>\n\n        );\n    }\n}\n\nexport default Counter;\n\n","import React from 'react';\nimport './App.css';\nimport './Calc/Calc.css';\nimport Settings from \"./Settings/Settings\";\nimport Counter from \"./Calc/Counter\";\n\nclass App extends React.Component {\n\n    state = {\n        count: 0,\n        maxValue: 0,\n        startValue: 0\n    }\n\n    componentDidMount() {\n        let counterStateAsString = localStorage.getItem('counter-state')\n        let newState = JSON.parse(counterStateAsString)\n        this.setState(newState)\n    }\n\n    saveState = () => {\n        let value = JSON.stringify(this.state)\n        localStorage.setItem('counter-state', value)\n    }\n    addCount = () => {\n        this.setState(\n            {count: this.state.count + 1});\n    };\n    unAddCount = () => {\n        this.setState(\n            {count: this.state.startValue});\n    };\n    setNewMaxValue = (newMaxValue) => {\n        if (newMaxValue < 0 ||\n            newMaxValue === this.state.startValue ||\n            newMaxValue < 0 ||\n            newMaxValue < this.state.startValue) {\n            this.setState({\n                maxValue: Number(newMaxValue),\n                count: 'Incorrect value'})\n        } else {\n            this.setState({\n                maxValue: Number(newMaxValue),\n                count: 'press Set'})\n        }\n    };\n\n    setNewStartValue = (newStartValue) => {\n        if(newStartValue >= this.state.maxValue ||\n            newStartValue < 0) {\n        this.setState({\n            startValue: Number(newStartValue),\n            count: 'Incorrect value'})\n        } else {\n            this.setState( {\n                startValue: Number(newStartValue),\n                count: 'press Set'})\n        }\n    }\n    setValue = () => {\n        this.setState(\n            {count: this.state.startValue}, () => {\n                this.saveState()\n            }\n        )\n    }\n\n\n    render = () => {\n        return (\n            <div>\n                <div className=\"calc\">\n                    <Counter count={this.state.count}\n                             maxValue={this.state.maxValue}\n                             startValue={this.state.startValue}\n                             addCount={this.addCount}\n                             unAddCount={this.unAddCount}/>\n                </div>\n                <div className=\"settings\">\n                    <Settings setNewMaxValue={this.setNewMaxValue}\n                              setNewStartValue={this.setNewStartValue}\n                              setValue={this.setValue}\n                              maxValue={this.state.maxValue}\n                              startValue={this.state.startValue}\n                              count={this.state.count}/>\n                </div>\n                <div className='samurai'/>\n            </div>\n        );\n    }\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}